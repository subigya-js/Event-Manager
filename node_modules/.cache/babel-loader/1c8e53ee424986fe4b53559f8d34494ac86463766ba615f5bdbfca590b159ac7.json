{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from \"react\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Location = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // let check = 0;\n  const targetLat = 28.598276000000002;\n  const targetLng = 77.39058700000001;\n  // Check if the browser supports geolocation\n  if (\"geolocation\" in navigator) {\n    // Request the user's location\n    navigator.geolocation.getCurrentPosition(function (position) {\n      // Success callback - the user's location was retrieved\n      const userLat = position.coords.latitude;\n      const userLng = position.coords.longitude;\n\n      // Calculate the distance between the user and the target location\n      const distance = getDistance(userLat, userLng, targetLat, targetLng);\n\n      // Check if the user is within 5 kilometers of the target location\n      if (distance <= 500) {\n        // check = 1;\n        console.log(\"User is within the target location\");\n        navigate(\"/camera\");\n      } else {\n        check = 0;\n        console.log(\"User is not within the target location\");\n      }\n    }, function (error) {\n      // Error callback - there was an error retrieving the user's location\n      console.error(`Error getting location: ${error.message}`);\n    });\n  } else {\n    // Geolocation is not supported by this browser\n    console.error(\"Geolocation is not supported by this browser.\");\n  }\n\n  // Function to calculate the distance between two points on the earth's surface\n  function getDistance(lat1, lng1, lat2, lng2) {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = toRadians(lat2 - lat1);\n    const dLng = toRadians(lng2 - lng1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in kilometers\n    return distance;\n  }\n\n  // Function to convert degrees to radians\n  function toRadians(degrees) {\n    return degrees * Math.PI / 180;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Location, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Location;\nexport default Location;\n// export { check };\nvar _c;\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"names":["React","Navigate","useNavigate","Fragment","_Fragment","jsxDEV","_jsxDEV","Location","_s","navigate","targetLat","targetLng","navigator","geolocation","getCurrentPosition","position","userLat","coords","latitude","userLng","longitude","distance","getDistance","console","log","check","error","message","lat1","lng1","lat2","lng2","R","dLat","toRadians","dLng","a","Math","sin","cos","c","atan2","sqrt","degrees","PI","_c","$RefreshReg$"],"sources":["C:/Users/subig/OneDrive/Desktop/Hackathon/hackathon-app/src/Components/Check_In_Components/Location.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\n\r\nconst Location = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // let check = 0;\r\n  const targetLat = 28.598276000000002;\r\n  const targetLng = 77.39058700000001;\r\n  // Check if the browser supports geolocation\r\n  if (\"geolocation\" in navigator) {\r\n    // Request the user's location\r\n    navigator.geolocation.getCurrentPosition(\r\n      function (position) {\r\n        // Success callback - the user's location was retrieved\r\n        const userLat = position.coords.latitude;\r\n        const userLng = position.coords.longitude;\r\n\r\n        // Calculate the distance between the user and the target location\r\n        const distance = getDistance(userLat, userLng, targetLat, targetLng);\r\n\r\n        // Check if the user is within 5 kilometers of the target location\r\n        if (distance <= 500) {\r\n          // check = 1;\r\n          console.log(\"User is within the target location\");\r\n\r\n          navigate(\"/camera\");\r\n        } else {\r\n          check = 0;\r\n          console.log(\"User is not within the target location\");\r\n        }\r\n      },\r\n      function (error) {\r\n        // Error callback - there was an error retrieving the user's location\r\n        console.error(`Error getting location: ${error.message}`);\r\n      }\r\n    );\r\n  } else {\r\n    // Geolocation is not supported by this browser\r\n    console.error(\"Geolocation is not supported by this browser.\");\r\n  }\r\n\r\n  // Function to calculate the distance between two points on the earth's surface\r\n  function getDistance(lat1, lng1, lat2, lng2) {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = toRadians(lat2 - lat1);\r\n    const dLng = toRadians(lng2 - lng1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(toRadians(lat1)) *\r\n        Math.cos(toRadians(lat2)) *\r\n        Math.sin(dLng / 2) *\r\n        Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distance = R * c; // Distance in kilometers\r\n    return distance;\r\n  }\r\n\r\n  // Function to convert degrees to radians\r\n  function toRadians(degrees) {\r\n    return (degrees * Math.PI) / 180;\r\n  }\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default Location;\r\n// export { check };\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGP,WAAW,EAAE;;EAE9B;EACA,MAAMQ,SAAS,GAAG,kBAAkB;EACpC,MAAMC,SAAS,GAAG,iBAAiB;EACnC;EACA,IAAI,aAAa,IAAIC,SAAS,EAAE;IAC9B;IACAA,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,UAAUC,QAAQ,EAAE;MAClB;MACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;MACxC,MAAMC,OAAO,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;;MAEzC;MACA,MAAMC,QAAQ,GAAGC,WAAW,CAACN,OAAO,EAAEG,OAAO,EAAET,SAAS,EAAEC,SAAS,CAAC;;MAEpE;MACA,IAAIU,QAAQ,IAAI,GAAG,EAAE;QACnB;QACAE,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QAEjDf,QAAQ,CAAC,SAAS,CAAC;MACrB,CAAC,MAAM;QACLgB,KAAK,GAAG,CAAC;QACTF,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACvD;IACF,CAAC,EACD,UAAUE,KAAK,EAAE;MACf;MACAH,OAAO,CAACG,KAAK,CAAE,2BAA0BA,KAAK,CAACC,OAAQ,EAAC,CAAC;IAC3D,CAAC,CACF;EACH,CAAC,MAAM;IACL;IACAJ,OAAO,CAACG,KAAK,CAAC,+CAA+C,CAAC;EAChE;;EAEA;EACA,SAASJ,WAAWA,CAACM,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAC3C,MAAMC,CAAC,GAAG,IAAI,CAAC,CAAC;IAChB,MAAMC,IAAI,GAAGC,SAAS,CAACJ,IAAI,GAAGF,IAAI,CAAC;IACnC,MAAMO,IAAI,GAAGD,SAAS,CAACH,IAAI,GAAGF,IAAI,CAAC;IACnC,MAAMO,CAAC,GACLC,IAAI,CAACC,GAAG,CAACL,IAAI,GAAG,CAAC,CAAC,GAAGI,IAAI,CAACC,GAAG,CAACL,IAAI,GAAG,CAAC,CAAC,GACvCI,IAAI,CAACE,GAAG,CAACL,SAAS,CAACN,IAAI,CAAC,CAAC,GACvBS,IAAI,CAACE,GAAG,CAACL,SAAS,CAACJ,IAAI,CAAC,CAAC,GACzBO,IAAI,CAACC,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC,GAClBE,IAAI,CAACC,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC;IACtB,MAAMK,CAAC,GAAG,CAAC,GAAGH,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACK,IAAI,CAACN,CAAC,CAAC,EAAEC,IAAI,CAACK,IAAI,CAAC,CAAC,GAAGN,CAAC,CAAC,CAAC;IACxD,MAAMf,QAAQ,GAAGW,CAAC,GAAGQ,CAAC,CAAC,CAAC;IACxB,OAAOnB,QAAQ;EACjB;;EAEA;EACA,SAASa,SAASA,CAACS,OAAO,EAAE;IAC1B,OAAQA,OAAO,GAAGN,IAAI,CAACO,EAAE,GAAI,GAAG;EAClC;EAEA,oBAAOtC,OAAA,CAAAF,SAAA,oBAAK;AACd,CAAC;AAACI,EAAA,CA7DID,QAAQ;EAAA,QACKL,WAAW;AAAA;AAAA2C,EAAA,GADxBtC,QAAQ;AA+Dd,eAAeA,QAAQ;AACvB;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}