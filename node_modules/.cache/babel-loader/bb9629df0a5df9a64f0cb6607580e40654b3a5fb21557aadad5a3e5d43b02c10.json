{"ast":null,"code":"import React from\"react\";import{Navigate,useNavigate}from\"react-router-dom\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var Location=function Location(){var navigate=useNavigate();// let check = 0;\nvar targetLat=28.598276000000002;var targetLng=77.39058700000001;// Check if the browser supports geolocation\nif(\"geolocation\"in navigator){// Request the user's location\nnavigator.geolocation.getCurrentPosition(function(position){// Success callback - the user's location was retrieved\nvar userLat=position.coords.latitude;var userLng=position.coords.longitude;// Calculate the distance between the user and the target location\nvar distance=getDistance(userLat,userLng,targetLat,targetLng);// Check if the user is within 5 kilometers of the target location\nif(distance<=500){// check = 1;\nconsole.log(\"User is within the target location\");navigate(\"/camera\");}else{// check = 0;\nconsole.log(\"User is not within the target location\");}},function(error){// Error callback - there was an error retrieving the user's location\nconsole.error(\"Error getting location: \".concat(error.message));});}else{// Geolocation is not supported by this browser\nconsole.error(\"Geolocation is not supported by this browser.\");}// Function to calculate the distance between two points on the earth's surface\nfunction getDistance(lat1,lng1,lat2,lng2){var R=6371;// Earth's radius in kilometers\nvar dLat=toRadians(lat2-lat1);var dLng=toRadians(lng2-lng1);var a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(toRadians(lat1))*Math.cos(toRadians(lat2))*Math.sin(dLng/2)*Math.sin(dLng/2);var c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));var distance=R*c;// Distance in kilometers\nreturn distance;}// Function to convert degrees to radians\nfunction toRadians(degrees){return degrees*Math.PI/180;}return/*#__PURE__*/_jsx(_Fragment,{});};export default Location;// export { check };","map":{"version":3,"names":["React","Navigate","useNavigate","Fragment","_Fragment","jsx","_jsx","Location","navigate","targetLat","targetLng","navigator","geolocation","getCurrentPosition","position","userLat","coords","latitude","userLng","longitude","distance","getDistance","console","log","error","concat","message","lat1","lng1","lat2","lng2","R","dLat","toRadians","dLng","a","Math","sin","cos","c","atan2","sqrt","degrees","PI"],"sources":["C:/Users/subig/OneDrive/Desktop/Hackathon/hackathon-app/src/Components/Check_In_Components/Location.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\n\r\nconst Location = () => {\r\n  const navigate = useNavigate();\r\n\r\n  // let check = 0;\r\n  const targetLat = 28.598276000000002;\r\n  const targetLng = 77.39058700000001;\r\n  // Check if the browser supports geolocation\r\n  if (\"geolocation\" in navigator) {\r\n    // Request the user's location\r\n    navigator.geolocation.getCurrentPosition(\r\n      function (position) {\r\n        // Success callback - the user's location was retrieved\r\n        const userLat = position.coords.latitude;\r\n        const userLng = position.coords.longitude;\r\n\r\n        // Calculate the distance between the user and the target location\r\n        const distance = getDistance(userLat, userLng, targetLat, targetLng);\r\n\r\n        // Check if the user is within 5 kilometers of the target location\r\n        if (distance <= 500) {\r\n          // check = 1;\r\n          console.log(\"User is within the target location\");\r\n\r\n          navigate(\"/camera\");\r\n        } else {\r\n          // check = 0;\r\n          console.log(\"User is not within the target location\");\r\n        }\r\n      },\r\n      function (error) {\r\n        // Error callback - there was an error retrieving the user's location\r\n        console.error(`Error getting location: ${error.message}`);\r\n      }\r\n    );\r\n  } else {\r\n    // Geolocation is not supported by this browser\r\n    console.error(\"Geolocation is not supported by this browser.\");\r\n  }\r\n\r\n  // Function to calculate the distance between two points on the earth's surface\r\n  function getDistance(lat1, lng1, lat2, lng2) {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = toRadians(lat2 - lat1);\r\n    const dLng = toRadians(lng2 - lng1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(toRadians(lat1)) *\r\n        Math.cos(toRadians(lat2)) *\r\n        Math.sin(dLng / 2) *\r\n        Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distance = R * c; // Distance in kilometers\r\n    return distance;\r\n  }\r\n\r\n  // Function to convert degrees to radians\r\n  function toRadians(degrees) {\r\n    return (degrees * Math.PI) / 180;\r\n  }\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default Location;\r\n// export { check };\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CAAC,OAAAC,QAAA,IAAAC,SAAA,gCAAAC,GAAA,IAAAC,IAAA,yBAEzD,GAAM,CAAAC,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAA,CAAS,CACrB,GAAM,CAAAC,QAAQ,CAAGN,WAAW,EAAE,CAE9B;AACA,GAAM,CAAAO,SAAS,CAAG,kBAAkB,CACpC,GAAM,CAAAC,SAAS,CAAG,iBAAiB,CACnC;AACA,GAAI,aAAa,EAAI,CAAAC,SAAS,CAAE,CAC9B;AACAA,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,SAAUC,QAAQ,CAAE,CAClB;AACA,GAAM,CAAAC,OAAO,CAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ,CACxC,GAAM,CAAAC,OAAO,CAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS,CAEzC;AACA,GAAM,CAAAC,QAAQ,CAAGC,WAAW,CAACN,OAAO,CAAEG,OAAO,CAAET,SAAS,CAAEC,SAAS,CAAC,CAEpE;AACA,GAAIU,QAAQ,EAAI,GAAG,CAAE,CACnB;AACAE,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAEjDf,QAAQ,CAAC,SAAS,CAAC,CACrB,CAAC,IAAM,CACL;AACAc,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CACvD,CACF,CAAC,CACD,SAAUC,KAAK,CAAE,CACf;AACAF,OAAO,CAACE,KAAK,4BAAAC,MAAA,CAA4BD,KAAK,CAACE,OAAO,EAAG,CAC3D,CAAC,CACF,CACH,CAAC,IAAM,CACL;AACAJ,OAAO,CAACE,KAAK,CAAC,+CAA+C,CAAC,CAChE,CAEA;AACA,QAAS,CAAAH,WAAWA,CAACM,IAAI,CAAEC,IAAI,CAAEC,IAAI,CAAEC,IAAI,CAAE,CAC3C,GAAM,CAAAC,CAAC,CAAG,IAAI,CAAE;AAChB,GAAM,CAAAC,IAAI,CAAGC,SAAS,CAACJ,IAAI,CAAGF,IAAI,CAAC,CACnC,GAAM,CAAAO,IAAI,CAAGD,SAAS,CAACH,IAAI,CAAGF,IAAI,CAAC,CACnC,GAAM,CAAAO,CAAC,CACLC,IAAI,CAACC,GAAG,CAACL,IAAI,CAAG,CAAC,CAAC,CAAGI,IAAI,CAACC,GAAG,CAACL,IAAI,CAAG,CAAC,CAAC,CACvCI,IAAI,CAACE,GAAG,CAACL,SAAS,CAACN,IAAI,CAAC,CAAC,CACvBS,IAAI,CAACE,GAAG,CAACL,SAAS,CAACJ,IAAI,CAAC,CAAC,CACzBO,IAAI,CAACC,GAAG,CAACH,IAAI,CAAG,CAAC,CAAC,CAClBE,IAAI,CAACC,GAAG,CAACH,IAAI,CAAG,CAAC,CAAC,CACtB,GAAM,CAAAK,CAAC,CAAG,CAAC,CAAGH,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACK,IAAI,CAACN,CAAC,CAAC,CAAEC,IAAI,CAACK,IAAI,CAAC,CAAC,CAAGN,CAAC,CAAC,CAAC,CACxD,GAAM,CAAAf,QAAQ,CAAGW,CAAC,CAAGQ,CAAC,CAAE;AACxB,MAAO,CAAAnB,QAAQ,CACjB,CAEA;AACA,QAAS,CAAAa,SAASA,CAACS,OAAO,CAAE,CAC1B,MAAQ,CAAAA,OAAO,CAAGN,IAAI,CAACO,EAAE,CAAI,GAAG,CAClC,CAEA,mBAAOrC,IAAA,CAAAF,SAAA,IAAK,CACd,CAAC,CAED,cAAe,CAAAG,QAAQ,CACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}