{"ast":null,"code":"/*!\r\n * depd\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nmodule.exports = depd;\n\n/**\r\n * Create deprecate for namespace in caller.\r\n */\n\nfunction depd(namespace) {\n  if (!namespace) {\n    throw new TypeError('argument namespace is required');\n  }\n  function deprecate(message) {\n    // no-op in browser\n  }\n  deprecate._file = undefined;\n  deprecate._ignored = true;\n  deprecate._namespace = namespace;\n  deprecate._traced = false;\n  deprecate._warned = Object.create(null);\n  deprecate.function = wrapfunction;\n  deprecate.property = wrapproperty;\n  return deprecate;\n}\n\n/**\r\n * Return a wrapped function in a deprecation message.\r\n *\r\n * This is a no-op version of the wrapper, which does nothing but call\r\n * validation.\r\n */\n\nfunction wrapfunction(fn, message) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('argument fn must be a function');\n  }\n  return fn;\n}\n\n/**\r\n * Wrap property in a deprecation message.\r\n *\r\n * This is a no-op version of the wrapper, which does nothing but call\r\n * validation.\r\n */\n\nfunction wrapproperty(obj, prop, message) {\n  if (!obj || typeof obj !== 'object' && typeof obj !== 'function') {\n    throw new TypeError('argument obj must be object');\n  }\n  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);\n  if (!descriptor) {\n    throw new TypeError('must call property on owner object');\n  }\n  if (!descriptor.configurable) {\n    throw new TypeError('property must be configurable');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}