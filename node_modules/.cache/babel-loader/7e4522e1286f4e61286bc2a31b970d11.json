{"ast":null,"code":"/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar debug = require('debug')('express:view');\nvar path = require('path');\nvar fs = require('fs');\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar extname = path.extname;\nvar join = path.join;\nvar resolve = path.resolve;\n\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = View;\n\n/**\r\n * Initialize a new `View` with the given `name`.\r\n *\r\n * Options:\r\n *\r\n *   - `defaultEngine` the default template engine name\r\n *   - `engines` template engine require() cache\r\n *   - `root` root path for view lookup\r\n *\r\n * @param {string} name\r\n * @param {object} options\r\n * @public\r\n */\n\nfunction View(name, options) {\n  var opts = options || {};\n  this.defaultEngine = opts.defaultEngine;\n  this.ext = extname(name);\n  this.name = name;\n  this.root = opts.root;\n  if (!this.ext && !this.defaultEngine) {\n    throw new Error('No default engine was specified and no extension was provided.');\n  }\n  var fileName = name;\n  if (!this.ext) {\n    // get extension from default engine name\n    this.ext = this.defaultEngine[0] !== '.' ? '.' + this.defaultEngine : this.defaultEngine;\n    fileName += this.ext;\n  }\n  if (!opts.engines[this.ext]) {\n    // load engine\n    var mod = this.ext.slice(1);\n    debug('require \"%s\"', mod);\n\n    // default engine export\n    var fn = require(mod).__express;\n    if (typeof fn !== 'function') {\n      throw new Error('Module \"' + mod + '\" does not provide a view engine.');\n    }\n    opts.engines[this.ext] = fn;\n  }\n\n  // store loaded engine\n  this.engine = opts.engines[this.ext];\n\n  // lookup path\n  this.path = this.lookup(fileName);\n}\n\n/**\r\n * Lookup view by the given `name`\r\n *\r\n * @param {string} name\r\n * @private\r\n */\n\nView.prototype.lookup = function lookup(name) {\n  var path;\n  var roots = [].concat(this.root);\n  debug('lookup \"%s\"', name);\n  for (var i = 0; i < roots.length && !path; i++) {\n    var root = roots[i];\n\n    // resolve the path\n    var loc = resolve(root, name);\n    var dir = dirname(loc);\n    var file = basename(loc);\n\n    // resolve the file\n    path = this.resolve(dir, file);\n  }\n  return path;\n};\n\n/**\r\n * Render with the given options.\r\n *\r\n * @param {object} options\r\n * @param {function} callback\r\n * @private\r\n */\n\nView.prototype.render = function render(options, callback) {\n  debug('render \"%s\"', this.path);\n  this.engine(this.path, options, callback);\n};\n\n/**\r\n * Resolve the file within the given directory.\r\n *\r\n * @param {string} dir\r\n * @param {string} file\r\n * @private\r\n */\n\nView.prototype.resolve = function resolve(dir, file) {\n  var ext = this.ext;\n\n  // <path>.<ext>\n  var path = join(dir, file);\n  var stat = tryStat(path);\n  if (stat && stat.isFile()) {\n    return path;\n  }\n\n  // <path>/index.<ext>\n  path = join(dir, basename(file, ext), 'index' + ext);\n  stat = tryStat(path);\n  if (stat && stat.isFile()) {\n    return path;\n  }\n};\n\n/**\r\n * Return a stat, maybe.\r\n *\r\n * @param {string} path\r\n * @return {fs.Stats}\r\n * @private\r\n */\n\nfunction tryStat(path) {\n  debug('stat \"%s\"', path);\n  try {\n    return fs.statSync(path);\n  } catch (e) {\n    return undefined;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}