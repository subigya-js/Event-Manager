{"ast":null,"code":"/**\r\n * Module dependencies.\r\n */\n\nvar crypto = require('crypto');\n\n/**\r\n * Sign the given `val` with `secret`.\r\n *\r\n * @param {String} val\r\n * @param {String} secret\r\n * @return {String}\r\n * @api private\r\n */\n\nexports.sign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto.createHmac('sha256', secret).update(val).digest('base64').replace(/\\=+$/, '');\n};\n\n/**\r\n * Unsign and decode the given `val` with `secret`,\r\n * returning `false` if the signature is invalid.\r\n *\r\n * @param {String} val\r\n * @param {String} secret\r\n * @return {String|Boolean}\r\n * @api private\r\n */\n\nexports.unsign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.')),\n    mac = exports.sign(str, secret);\n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\r\n * Private\r\n */\n\nfunction sha1(str) {\n  return crypto.createHash('sha1').update(str).digest('hex');\n}","map":null,"metadata":{},"sourceType":"script"}