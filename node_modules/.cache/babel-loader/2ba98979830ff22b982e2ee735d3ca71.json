{"ast":null,"code":"/*!\r\n * content-disposition\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nmodule.exports = contentDisposition;\nmodule.exports.parse = parse;\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar basename = require('path').basename;\nvar Buffer = require('safe-buffer').Buffer;\n\n/**\r\n * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including \"%\")\r\n * @private\r\n */\n\nvar ENCODE_URL_ATTR_CHAR_REGEXP = /[\\x00-\\x20\"'()*,/:;<=>?@[\\\\\\]{}\\x7f]/g; // eslint-disable-line no-control-regex\n\n/**\r\n * RegExp to match percent encoding escape.\r\n * @private\r\n */\n\nvar HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;\nvar HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;\n\n/**\r\n * RegExp to match non-latin1 characters.\r\n * @private\r\n */\n\nvar NON_LATIN1_REGEXP = /[^\\x20-\\x7e\\xa0-\\xff]/g;\n\n/**\r\n * RegExp to match quoted-pair in RFC 2616\r\n *\r\n * quoted-pair = \"\\\" CHAR\r\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\r\n * @private\r\n */\n\nvar QESC_REGEXP = /\\\\([\\u0000-\\u007f])/g; // eslint-disable-line no-control-regex\n\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 2616\r\n * @private\r\n */\n\nvar QUOTE_REGEXP = /([\\\\\"])/g;\n\n/**\r\n * RegExp for various RFC 2616 grammar\r\n *\r\n * parameter     = token \"=\" ( token | quoted-string )\r\n * token         = 1*<any CHAR except CTLs or separators>\r\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\r\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\r\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\r\n *               | \"{\" | \"}\" | SP | HT\r\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\r\n * qdtext        = <any TEXT except <\">>\r\n * quoted-pair   = \"\\\" CHAR\r\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\r\n * TEXT          = <any OCTET except CTLs, but including LWS>\r\n * LWS           = [CRLF] 1*( SP | HT )\r\n * CRLF          = CR LF\r\n * CR            = <US-ASCII CR, carriage return (13)>\r\n * LF            = <US-ASCII LF, linefeed (10)>\r\n * SP            = <US-ASCII SP, space (32)>\r\n * HT            = <US-ASCII HT, horizontal-tab (9)>\r\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\r\n * OCTET         = <any 8-bit sequence of data>\r\n * @private\r\n */\n\nvar PARAM_REGEXP = /;[\\x09\\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*=[\\x09\\x20]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*/g; // eslint-disable-line no-control-regex\nvar TEXT_REGEXP = /^[\\x20-\\x7e\\x80-\\xff]+$/;\nvar TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;\n\n/**\r\n * RegExp for various RFC 5987 grammar\r\n *\r\n * ext-value     = charset  \"'\" [ language ] \"'\" value-chars\r\n * charset       = \"UTF-8\" / \"ISO-8859-1\" / mime-charset\r\n * mime-charset  = 1*mime-charsetc\r\n * mime-charsetc = ALPHA / DIGIT\r\n *               / \"!\" / \"#\" / \"$\" / \"%\" / \"&\"\r\n *               / \"+\" / \"-\" / \"^\" / \"_\" / \"`\"\r\n *               / \"{\" / \"}\" / \"~\"\r\n * language      = ( 2*3ALPHA [ extlang ] )\r\n *               / 4ALPHA\r\n *               / 5*8ALPHA\r\n * extlang       = *3( \"-\" 3ALPHA )\r\n * value-chars   = *( pct-encoded / attr-char )\r\n * pct-encoded   = \"%\" HEXDIG HEXDIG\r\n * attr-char     = ALPHA / DIGIT\r\n *               / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\"\r\n *               / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n * @private\r\n */\n\nvar EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;\n\n/**\r\n * RegExp for various RFC 6266 grammar\r\n *\r\n * disposition-type = \"inline\" | \"attachment\" | disp-ext-type\r\n * disp-ext-type    = token\r\n * disposition-parm = filename-parm | disp-ext-parm\r\n * filename-parm    = \"filename\" \"=\" value\r\n *                  | \"filename*\" \"=\" ext-value\r\n * disp-ext-parm    = token \"=\" value\r\n *                  | ext-token \"=\" ext-value\r\n * ext-token        = <the characters in token, followed by \"*\">\r\n * @private\r\n */\n\nvar DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*(?:$|;)/; // eslint-disable-line no-control-regex\n\n/**\r\n * Create an attachment Content-Disposition header.\r\n *\r\n * @param {string} [filename]\r\n * @param {object} [options]\r\n * @param {string} [options.type=attachment]\r\n * @param {string|boolean} [options.fallback=true]\r\n * @return {string}\r\n * @public\r\n */\n\nfunction contentDisposition(filename, options) {\n  var opts = options || {};\n\n  // get type\n  var type = opts.type || 'attachment';\n\n  // get parameters\n  var params = createparams(filename, opts.fallback);\n\n  // format into string\n  return format(new ContentDisposition(type, params));\n}\n\n/**\r\n * Create parameters object from filename and fallback.\r\n *\r\n * @param {string} [filename]\r\n * @param {string|boolean} [fallback=true]\r\n * @return {object}\r\n * @private\r\n */\n\nfunction createparams(filename, fallback) {\n  if (filename === undefined) {\n    return;\n  }\n  var params = {};\n  if (typeof filename !== 'string') {\n    throw new TypeError('filename must be a string');\n  }\n\n  // fallback defaults to true\n  if (fallback === undefined) {\n    fallback = true;\n  }\n  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {\n    throw new TypeError('fallback must be a string or boolean');\n  }\n  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {\n    throw new TypeError('fallback must be ISO-8859-1 string');\n  }\n\n  // restrict to file base name\n  var name = basename(filename);\n\n  // determine if name is suitable for quoted string\n  var isQuotedString = TEXT_REGEXP.test(name);\n\n  // generate fallback name\n  var fallbackName = typeof fallback !== 'string' ? fallback && getlatin1(name) : basename(fallback);\n  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name;\n\n  // set extended filename parameter\n  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {\n    params['filename*'] = name;\n  }\n\n  // set filename parameter\n  if (isQuotedString || hasFallback) {\n    params.filename = hasFallback ? fallbackName : name;\n  }\n  return params;\n}\n\n/**\r\n * Format object to Content-Disposition header.\r\n *\r\n * @param {object} obj\r\n * @param {string} obj.type\r\n * @param {object} [obj.parameters]\r\n * @return {string}\r\n * @private\r\n */\n\nfunction format(obj) {\n  var parameters = obj.parameters;\n  var type = obj.type;\n  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {\n    throw new TypeError('invalid type');\n  }\n\n  // start with normalized type\n  var string = String(type).toLowerCase();\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param;\n    var params = Object.keys(parameters).sort();\n    for (var i = 0; i < params.length; i++) {\n      param = params[i];\n      var val = param.substr(-1) === '*' ? ustring(parameters[param]) : qstring(parameters[param]);\n      string += '; ' + param + '=' + val;\n    }\n  }\n  return string;\n}\n\n/**\r\n * Decode a RFC 5987 field value (gracefully).\r\n *\r\n * @param {string} str\r\n * @return {string}\r\n * @private\r\n */\n\nfunction decodefield(str) {\n  var match = EXT_VALUE_REGEXP.exec(str);\n  if (!match) {\n    throw new TypeError('invalid extended field value');\n  }\n  var charset = match[1].toLowerCase();\n  var encoded = match[2];\n  var value;\n\n  // to binary string\n  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);\n  switch (charset) {\n    case 'iso-8859-1':\n      value = getlatin1(binary);\n      break;\n    case 'utf-8':\n      value = Buffer.from(binary, 'binary').toString('utf8');\n      break;\n    default:\n      throw new TypeError('unsupported charset in extended field');\n  }\n  return value;\n}\n\n/**\r\n * Get ISO-8859-1 version of string.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\n\nfunction getlatin1(val) {\n  // simple Unicode -> ISO-8859-1 transformation\n  return String(val).replace(NON_LATIN1_REGEXP, '?');\n}\n\n/**\r\n * Parse Content-Disposition header string.\r\n *\r\n * @param {string} string\r\n * @return {object}\r\n * @public\r\n */\n\nfunction parse(string) {\n  if (!string || typeof string !== 'string') {\n    throw new TypeError('argument string is required');\n  }\n  var match = DISPOSITION_TYPE_REGEXP.exec(string);\n  if (!match) {\n    throw new TypeError('invalid type format');\n  }\n\n  // normalize type\n  var index = match[0].length;\n  var type = match[1].toLowerCase();\n  var key;\n  var names = [];\n  var params = {};\n  var value;\n\n  // calculate index to start at\n  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';' ? index - 1 : index;\n\n  // match parameters\n  while (match = PARAM_REGEXP.exec(string)) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format');\n    }\n    index += match[0].length;\n    key = match[1].toLowerCase();\n    value = match[2];\n    if (names.indexOf(key) !== -1) {\n      throw new TypeError('invalid duplicate parameter');\n    }\n    names.push(key);\n    if (key.indexOf('*') + 1 === key.length) {\n      // decode extended value\n      key = key.slice(0, -1);\n      value = decodefield(value);\n\n      // overwrite existing value\n      params[key] = value;\n      continue;\n    }\n    if (typeof params[key] === 'string') {\n      continue;\n    }\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value.substr(1, value.length - 2).replace(QESC_REGEXP, '$1');\n    }\n    params[key] = value;\n  }\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format');\n  }\n  return new ContentDisposition(type, params);\n}\n\n/**\r\n * Percent decode a single character.\r\n *\r\n * @param {string} str\r\n * @param {string} hex\r\n * @return {string}\r\n * @private\r\n */\n\nfunction pdecode(str, hex) {\n  return String.fromCharCode(parseInt(hex, 16));\n}\n\n/**\r\n * Percent encode a single character.\r\n *\r\n * @param {string} char\r\n * @return {string}\r\n * @private\r\n */\n\nfunction pencode(char) {\n  return '%' + String(char).charCodeAt(0).toString(16).toUpperCase();\n}\n\n/**\r\n * Quote a string for HTTP.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\n\nfunction qstring(val) {\n  var str = String(val);\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"';\n}\n\n/**\r\n * Encode a Unicode string for HTTP (RFC 5987).\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\n\nfunction ustring(val) {\n  var str = String(val);\n\n  // percent encode as UTF-8\n  var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);\n  return 'UTF-8\\'\\'' + encoded;\n}\n\n/**\r\n * Class for parsed Content-Disposition header for v8 optimization\r\n *\r\n * @public\r\n * @param {string} type\r\n * @param {object} parameters\r\n * @constructor\r\n */\n\nfunction ContentDisposition(type, parameters) {\n  this.type = type;\n  this.parameters = parameters;\n}","map":null,"metadata":{},"sourceType":"script"}