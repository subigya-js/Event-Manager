{"ast":null,"code":"/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @api private\r\n */\nvar Buffer = require('safe-buffer').Buffer;\nvar contentDisposition = require('content-disposition');\nvar contentType = require('content-type');\nvar deprecate = require('depd')('express');\nvar flatten = require('array-flatten');\nvar mime = require('send').mime;\nvar etag = require('etag');\nvar proxyaddr = require('proxy-addr');\nvar qs = require('qs');\nvar querystring = require('querystring');\n\n/**\r\n * Return strong ETag for `body`.\r\n *\r\n * @param {String|Buffer} body\r\n * @param {String} [encoding]\r\n * @return {String}\r\n * @api private\r\n */\n\nexports.etag = createETagGenerator({\n  weak: false\n});\n\n/**\r\n * Return weak ETag for `body`.\r\n *\r\n * @param {String|Buffer} body\r\n * @param {String} [encoding]\r\n * @return {String}\r\n * @api private\r\n */\n\nexports.wetag = createETagGenerator({\n  weak: true\n});\n\n/**\r\n * Check if `path` looks absolute.\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api private\r\n */\n\nexports.isAbsolute = function (path) {\n  if ('/' === path[0]) return true;\n  if (':' === path[1] && ('\\\\' === path[2] || '/' === path[2])) return true; // Windows device path\n  if ('\\\\\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path\n};\n\n/**\r\n * Flatten the given `arr`.\r\n *\r\n * @param {Array} arr\r\n * @return {Array}\r\n * @api private\r\n */\n\nexports.flatten = deprecate.function(flatten, 'utils.flatten: use array-flatten npm module instead');\n\n/**\r\n * Normalize the given `type`, for example \"html\" becomes \"text/html\".\r\n *\r\n * @param {String} type\r\n * @return {Object}\r\n * @api private\r\n */\n\nexports.normalizeType = function (type) {\n  return ~type.indexOf('/') ? acceptParams(type) : {\n    value: mime.lookup(type),\n    params: {}\n  };\n};\n\n/**\r\n * Normalize `types`, for example \"html\" becomes \"text/html\".\r\n *\r\n * @param {Array} types\r\n * @return {Array}\r\n * @api private\r\n */\n\nexports.normalizeTypes = function (types) {\n  var ret = [];\n  for (var i = 0; i < types.length; ++i) {\n    ret.push(exports.normalizeType(types[i]));\n  }\n  return ret;\n};\n\n/**\r\n * Generate Content-Disposition header appropriate for the filename.\r\n * non-ascii filenames are urlencoded and a filename* parameter is added\r\n *\r\n * @param {String} filename\r\n * @return {String}\r\n * @api private\r\n */\n\nexports.contentDisposition = deprecate.function(contentDisposition, 'utils.contentDisposition: use content-disposition npm module instead');\n\n/**\r\n * Parse accept params `str` returning an\r\n * object with `.value`, `.quality` and `.params`.\r\n * also includes `.originalIndex` for stable sorting\r\n *\r\n * @param {String} str\r\n * @param {Number} index\r\n * @return {Object}\r\n * @api private\r\n */\n\nfunction acceptParams(str, index) {\n  var parts = str.split(/ *; */);\n  var ret = {\n    value: parts[0],\n    quality: 1,\n    params: {},\n    originalIndex: index\n  };\n  for (var i = 1; i < parts.length; ++i) {\n    var pms = parts[i].split(/ *= */);\n    if ('q' === pms[0]) {\n      ret.quality = parseFloat(pms[1]);\n    } else {\n      ret.params[pms[0]] = pms[1];\n    }\n  }\n  return ret;\n}\n\n/**\r\n * Compile \"etag\" value to function.\r\n *\r\n * @param  {Boolean|String|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\n\nexports.compileETag = function (val) {\n  var fn;\n  if (typeof val === 'function') {\n    return val;\n  }\n  switch (val) {\n    case true:\n    case 'weak':\n      fn = exports.wetag;\n      break;\n    case false:\n      break;\n    case 'strong':\n      fn = exports.etag;\n      break;\n    default:\n      throw new TypeError('unknown value for etag function: ' + val);\n  }\n  return fn;\n};\n\n/**\r\n * Compile \"query parser\" value to function.\r\n *\r\n * @param  {String|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\n\nexports.compileQueryParser = function compileQueryParser(val) {\n  var fn;\n  if (typeof val === 'function') {\n    return val;\n  }\n  switch (val) {\n    case true:\n    case 'simple':\n      fn = querystring.parse;\n      break;\n    case false:\n      fn = newObject;\n      break;\n    case 'extended':\n      fn = parseExtendedQueryString;\n      break;\n    default:\n      throw new TypeError('unknown value for query parser function: ' + val);\n  }\n  return fn;\n};\n\n/**\r\n * Compile \"proxy trust\" value to function.\r\n *\r\n * @param  {Boolean|String|Number|Array|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\n\nexports.compileTrust = function (val) {\n  if (typeof val === 'function') return val;\n  if (val === true) {\n    // Support plain true/false\n    return function () {\n      return true;\n    };\n  }\n  if (typeof val === 'number') {\n    // Support trusting hop count\n    return function (a, i) {\n      return i < val;\n    };\n  }\n  if (typeof val === 'string') {\n    // Support comma-separated values\n    val = val.split(',').map(function (v) {\n      return v.trim();\n    });\n  }\n  return proxyaddr.compile(val || []);\n};\n\n/**\r\n * Set the charset in a given Content-Type string.\r\n *\r\n * @param {String} type\r\n * @param {String} charset\r\n * @return {String}\r\n * @api private\r\n */\n\nexports.setCharset = function setCharset(type, charset) {\n  if (!type || !charset) {\n    return type;\n  }\n\n  // parse type\n  var parsed = contentType.parse(type);\n\n  // set charset\n  parsed.parameters.charset = charset;\n\n  // format type\n  return contentType.format(parsed);\n};\n\n/**\r\n * Create an ETag generator function, generating ETags with\r\n * the given options.\r\n *\r\n * @param {object} options\r\n * @return {function}\r\n * @private\r\n */\n\nfunction createETagGenerator(options) {\n  return function generateETag(body, encoding) {\n    var buf = !Buffer.isBuffer(body) ? Buffer.from(body, encoding) : body;\n    return etag(buf, options);\n  };\n}\n\n/**\r\n * Parse an extended query string with qs.\r\n *\r\n * @return {Object}\r\n * @private\r\n */\n\nfunction parseExtendedQueryString(str) {\n  return qs.parse(str, {\n    allowPrototypes: true\n  });\n}\n\n/**\r\n * Return new empty object.\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\n\nfunction newObject() {\n  return {};\n}","map":null,"metadata":{},"sourceType":"script"}