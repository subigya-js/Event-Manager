{"ast":null,"code":"/*!\r\n * type-is\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar typer = require('media-typer');\nvar mime = require('mime-types');\n\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = typeofrequest;\nmodule.exports.is = typeis;\nmodule.exports.hasBody = hasbody;\nmodule.exports.normalize = normalize;\nmodule.exports.match = mimeMatch;\n\n/**\r\n * Compare a `value` content-type with `types`.\r\n * Each `type` can be an extension like `html`,\r\n * a special shortcut like `multipart` or `urlencoded`,\r\n * or a mime type.\r\n *\r\n * If no types match, `false` is returned.\r\n * Otherwise, the first `type` that matches is returned.\r\n *\r\n * @param {String} value\r\n * @param {Array} types\r\n * @public\r\n */\n\nfunction typeis(value, types_) {\n  var i;\n  var types = types_;\n\n  // remove parameters and normalize\n  var val = tryNormalizeType(value);\n\n  // no type or invalid\n  if (!val) {\n    return false;\n  }\n\n  // support flattened arguments\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length - 1);\n    for (i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1];\n    }\n  }\n\n  // no types, return the content type\n  if (!types || !types.length) {\n    return val;\n  }\n  var type;\n  for (i = 0; i < types.length; i++) {\n    if (mimeMatch(normalize(type = types[i]), val)) {\n      return type[0] === '+' || type.indexOf('*') !== -1 ? val : type;\n    }\n  }\n\n  // no matches\n  return false;\n}\n\n/**\r\n * Check if a request has a request body.\r\n * A request with a body __must__ either have `transfer-encoding`\r\n * or `content-length` headers set.\r\n * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3\r\n *\r\n * @param {Object} request\r\n * @return {Boolean}\r\n * @public\r\n */\n\nfunction hasbody(req) {\n  return req.headers['transfer-encoding'] !== undefined || !isNaN(req.headers['content-length']);\n}\n\n/**\r\n * Check if the incoming request contains the \"Content-Type\"\r\n * header field, and it contains any of the give mime `type`s.\r\n * If there is no request body, `null` is returned.\r\n * If there is no content type, `false` is returned.\r\n * Otherwise, it returns the first `type` that matches.\r\n *\r\n * Examples:\r\n *\r\n *     // With Content-Type: text/html; charset=utf-8\r\n *     this.is('html'); // => 'html'\r\n *     this.is('text/html'); // => 'text/html'\r\n *     this.is('text/*', 'application/json'); // => 'text/html'\r\n *\r\n *     // When Content-Type is application/json\r\n *     this.is('json', 'urlencoded'); // => 'json'\r\n *     this.is('application/json'); // => 'application/json'\r\n *     this.is('html', 'application/*'); // => 'application/json'\r\n *\r\n *     this.is('html'); // => false\r\n *\r\n * @param {String|Array} types...\r\n * @return {String|false|null}\r\n * @public\r\n */\n\nfunction typeofrequest(req, types_) {\n  var types = types_;\n\n  // no body\n  if (!hasbody(req)) {\n    return null;\n  }\n\n  // support flattened arguments\n  if (arguments.length > 2) {\n    types = new Array(arguments.length - 1);\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1];\n    }\n  }\n\n  // request content type\n  var value = req.headers['content-type'];\n  return typeis(value, types);\n}\n\n/**\r\n * Normalize a mime type.\r\n * If it's a shorthand, expand it to a valid mime type.\r\n *\r\n * In general, you probably want:\r\n *\r\n *   var type = is(req, ['urlencoded', 'json', 'multipart']);\r\n *\r\n * Then use the appropriate body parsers.\r\n * These three are the most common request body types\r\n * and are thus ensured to work.\r\n *\r\n * @param {String} type\r\n * @private\r\n */\n\nfunction normalize(type) {\n  if (typeof type !== 'string') {\n    // invalid type\n    return false;\n  }\n  switch (type) {\n    case 'urlencoded':\n      return 'application/x-www-form-urlencoded';\n    case 'multipart':\n      return 'multipart/*';\n  }\n  if (type[0] === '+') {\n    // \"+json\" -> \"*/*+json\" expando\n    return '*/*' + type;\n  }\n  return type.indexOf('/') === -1 ? mime.lookup(type) : type;\n}\n\n/**\r\n * Check if `expected` mime type\r\n * matches `actual` mime type with\r\n * wildcard and +suffix support.\r\n *\r\n * @param {String} expected\r\n * @param {String} actual\r\n * @return {Boolean}\r\n * @private\r\n */\n\nfunction mimeMatch(expected, actual) {\n  // invalid type\n  if (expected === false) {\n    return false;\n  }\n\n  // split types\n  var actualParts = actual.split('/');\n  var expectedParts = expected.split('/');\n\n  // invalid format\n  if (actualParts.length !== 2 || expectedParts.length !== 2) {\n    return false;\n  }\n\n  // validate type\n  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {\n    return false;\n  }\n\n  // validate suffix wildcard\n  if (expectedParts[1].substr(0, 2) === '*+') {\n    return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);\n  }\n\n  // validate subtype\n  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {\n    return false;\n  }\n  return true;\n}\n\n/**\r\n * Normalize a type and remove parameters.\r\n *\r\n * @param {string} value\r\n * @return {string}\r\n * @private\r\n */\n\nfunction normalizeType(value) {\n  // parse the type\n  var type = typer.parse(value);\n\n  // remove the parameters\n  type.parameters = undefined;\n\n  // reformat it\n  return typer.format(type);\n}\n\n/**\r\n * Try to normalize a type and remove parameters.\r\n *\r\n * @param {string} value\r\n * @return {string}\r\n * @private\r\n */\n\nfunction tryNormalizeType(value) {\n  if (!value) {\n    return null;\n  }\n  try {\n    return normalizeType(value);\n  } catch (err) {\n    return null;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}