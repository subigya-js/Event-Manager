{"ast":null,"code":"/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar finalhandler = require('finalhandler');\nvar Router = require('./router');\nvar methods = require('methods');\nvar middleware = require('./middleware/init');\nvar query = require('./middleware/query');\nvar debug = require('debug')('express:application');\nvar View = require('./view');\nvar http = require('http');\nvar compileETag = require('./utils').compileETag;\nvar compileQueryParser = require('./utils').compileQueryParser;\nvar compileTrust = require('./utils').compileTrust;\nvar deprecate = require('depd')('express');\nvar flatten = require('array-flatten');\nvar merge = require('utils-merge');\nvar resolve = require('path').resolve;\nvar setPrototypeOf = require('setprototypeof');\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar slice = Array.prototype.slice;\n\n/**\r\n * Application prototype.\r\n */\n\nvar app = exports = module.exports = {};\n\n/**\r\n * Variable for trust proxy inheritance back-compat\r\n * @private\r\n */\n\nvar trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';\n\n/**\r\n * Initialize the server.\r\n *\r\n *   - setup default configuration\r\n *   - setup default middleware\r\n *   - setup route reflection methods\r\n *\r\n * @private\r\n */\n\napp.init = function init() {\n  this.cache = {};\n  this.engines = {};\n  this.settings = {};\n  this.defaultConfiguration();\n};\n\n/**\r\n * Initialize application configuration.\r\n * @private\r\n */\n\napp.defaultConfiguration = function defaultConfiguration() {\n  var env = process.env.NODE_ENV || 'development';\n\n  // default settings\n  this.enable('x-powered-by');\n  this.set('etag', 'weak');\n  this.set('env', env);\n  this.set('query parser', 'extended');\n  this.set('subdomain offset', 2);\n  this.set('trust proxy', false);\n\n  // trust proxy inherit back-compat\n  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {\n    configurable: true,\n    value: true\n  });\n  debug('booting in %s mode', env);\n  this.on('mount', function onmount(parent) {\n    // inherit trust proxy\n    if (this.settings[trustProxyDefaultSymbol] === true && typeof parent.settings['trust proxy fn'] === 'function') {\n      delete this.settings['trust proxy'];\n      delete this.settings['trust proxy fn'];\n    }\n\n    // inherit protos\n    setPrototypeOf(this.request, parent.request);\n    setPrototypeOf(this.response, parent.response);\n    setPrototypeOf(this.engines, parent.engines);\n    setPrototypeOf(this.settings, parent.settings);\n  });\n\n  // setup locals\n  this.locals = Object.create(null);\n\n  // top-most app is mounted at /\n  this.mountpath = '/';\n\n  // default locals\n  this.locals.settings = this.settings;\n\n  // default configuration\n  this.set('view', View);\n  this.set('views', resolve('views'));\n  this.set('jsonp callback name', 'callback');\n  if (env === 'production') {\n    this.enable('view cache');\n  }\n  Object.defineProperty(this, 'router', {\n    get: function get() {\n      throw new Error('\\'app.router\\' is deprecated!\\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');\n    }\n  });\n};\n\n/**\r\n * lazily adds the base router if it has not yet been added.\r\n *\r\n * We cannot add the base router in the defaultConfiguration because\r\n * it reads app settings which might be set after that has run.\r\n *\r\n * @private\r\n */\napp.lazyrouter = function lazyrouter() {\n  if (!this._router) {\n    this._router = new Router({\n      caseSensitive: this.enabled('case sensitive routing'),\n      strict: this.enabled('strict routing')\n    });\n    this._router.use(query(this.get('query parser fn')));\n    this._router.use(middleware.init(this));\n  }\n};\n\n/**\r\n * Dispatch a req, res pair into the application. Starts pipeline processing.\r\n *\r\n * If no callback is provided, then default error handlers will respond\r\n * in the event of an error bubbling through the stack.\r\n *\r\n * @private\r\n */\n\napp.handle = function handle(req, res, callback) {\n  var router = this._router;\n\n  // final handler\n  var done = callback || finalhandler(req, res, {\n    env: this.get('env'),\n    onerror: logerror.bind(this)\n  });\n\n  // no routes\n  if (!router) {\n    debug('no routes defined on app');\n    done();\n    return;\n  }\n  router.handle(req, res, done);\n};\n\n/**\r\n * Proxy `Router#use()` to add middleware to the app router.\r\n * See Router#use() documentation for details.\r\n *\r\n * If the _fn_ parameter is an express app, then it will be\r\n * mounted at the _route_ specified.\r\n *\r\n * @public\r\n */\n\napp.use = function use(fn) {\n  var offset = 0;\n  var path = '/';\n\n  // default path to '/'\n  // disambiguate app.use([fn])\n  if (typeof fn !== 'function') {\n    var arg = fn;\n    while (Array.isArray(arg) && arg.length !== 0) {\n      arg = arg[0];\n    }\n\n    // first arg is the path\n    if (typeof arg !== 'function') {\n      offset = 1;\n      path = fn;\n    }\n  }\n  var fns = flatten(slice.call(arguments, offset));\n  if (fns.length === 0) {\n    throw new TypeError('app.use() requires a middleware function');\n  }\n\n  // setup router\n  this.lazyrouter();\n  var router = this._router;\n  fns.forEach(function (fn) {\n    // non-express app\n    if (!fn || !fn.handle || !fn.set) {\n      return router.use(path, fn);\n    }\n    debug('.use app under %s', path);\n    fn.mountpath = path;\n    fn.parent = this;\n\n    // restore .app property on req and res\n    router.use(path, function mounted_app(req, res, next) {\n      var orig = req.app;\n      fn.handle(req, res, function (err) {\n        setPrototypeOf(req, orig.request);\n        setPrototypeOf(res, orig.response);\n        next(err);\n      });\n    });\n\n    // mounted an app\n    fn.emit('mount', this);\n  }, this);\n  return this;\n};\n\n/**\r\n * Proxy to the app `Router#route()`\r\n * Returns a new `Route` instance for the _path_.\r\n *\r\n * Routes are isolated middleware stacks for specific paths.\r\n * See the Route api docs for details.\r\n *\r\n * @public\r\n */\n\napp.route = function route(path) {\n  this.lazyrouter();\n  return this._router.route(path);\n};\n\n/**\r\n * Register the given template engine callback `fn`\r\n * as `ext`.\r\n *\r\n * By default will `require()` the engine based on the\r\n * file extension. For example if you try to render\r\n * a \"foo.ejs\" file Express will invoke the following internally:\r\n *\r\n *     app.engine('ejs', require('ejs').__express);\r\n *\r\n * For engines that do not provide `.__express` out of the box,\r\n * or if you wish to \"map\" a different extension to the template engine\r\n * you may use this method. For example mapping the EJS template engine to\r\n * \".html\" files:\r\n *\r\n *     app.engine('html', require('ejs').renderFile);\r\n *\r\n * In this case EJS provides a `.renderFile()` method with\r\n * the same signature that Express expects: `(path, options, callback)`,\r\n * though note that it aliases this method as `ejs.__express` internally\r\n * so if you're using \".ejs\" extensions you don't need to do anything.\r\n *\r\n * Some template engines do not follow this convention, the\r\n * [Consolidate.js](https://github.com/tj/consolidate.js)\r\n * library was created to map all of node's popular template\r\n * engines to follow this convention, thus allowing them to\r\n * work seamlessly within Express.\r\n *\r\n * @param {String} ext\r\n * @param {Function} fn\r\n * @return {app} for chaining\r\n * @public\r\n */\n\napp.engine = function engine(ext, fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('callback function required');\n  }\n\n  // get file extension\n  var extension = ext[0] !== '.' ? '.' + ext : ext;\n\n  // store engine\n  this.engines[extension] = fn;\n  return this;\n};\n\n/**\r\n * Proxy to `Router#param()` with one added api feature. The _name_ parameter\r\n * can be an array of names.\r\n *\r\n * See the Router#param() docs for more details.\r\n *\r\n * @param {String|Array} name\r\n * @param {Function} fn\r\n * @return {app} for chaining\r\n * @public\r\n */\n\napp.param = function param(name, fn) {\n  this.lazyrouter();\n  if (Array.isArray(name)) {\n    for (var i = 0; i < name.length; i++) {\n      this.param(name[i], fn);\n    }\n    return this;\n  }\n  this._router.param(name, fn);\n  return this;\n};\n\n/**\r\n * Assign `setting` to `val`, or return `setting`'s value.\r\n *\r\n *    app.set('foo', 'bar');\r\n *    app.set('foo');\r\n *    // => \"bar\"\r\n *\r\n * Mounted servers inherit their parent server's settings.\r\n *\r\n * @param {String} setting\r\n * @param {*} [val]\r\n * @return {Server} for chaining\r\n * @public\r\n */\n\napp.set = function set(setting, val) {\n  if (arguments.length === 1) {\n    // app.get(setting)\n    var settings = this.settings;\n    while (settings && settings !== Object.prototype) {\n      if (hasOwnProperty.call(settings, setting)) {\n        return settings[setting];\n      }\n      settings = Object.getPrototypeOf(settings);\n    }\n    return undefined;\n  }\n  debug('set \"%s\" to %o', setting, val);\n\n  // set value\n  this.settings[setting] = val;\n\n  // trigger matched settings\n  switch (setting) {\n    case 'etag':\n      this.set('etag fn', compileETag(val));\n      break;\n    case 'query parser':\n      this.set('query parser fn', compileQueryParser(val));\n      break;\n    case 'trust proxy':\n      this.set('trust proxy fn', compileTrust(val));\n\n      // trust proxy inherit back-compat\n      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {\n        configurable: true,\n        value: false\n      });\n      break;\n  }\n  return this;\n};\n\n/**\r\n * Return the app's absolute pathname\r\n * based on the parent(s) that have\r\n * mounted it.\r\n *\r\n * For example if the application was\r\n * mounted as \"/admin\", which itself\r\n * was mounted as \"/blog\" then the\r\n * return value would be \"/blog/admin\".\r\n *\r\n * @return {String}\r\n * @private\r\n */\n\napp.path = function path() {\n  return this.parent ? this.parent.path() + this.mountpath : '';\n};\n\n/**\r\n * Check if `setting` is enabled (truthy).\r\n *\r\n *    app.enabled('foo')\r\n *    // => false\r\n *\r\n *    app.enable('foo')\r\n *    app.enabled('foo')\r\n *    // => true\r\n *\r\n * @param {String} setting\r\n * @return {Boolean}\r\n * @public\r\n */\n\napp.enabled = function enabled(setting) {\n  return Boolean(this.set(setting));\n};\n\n/**\r\n * Check if `setting` is disabled.\r\n *\r\n *    app.disabled('foo')\r\n *    // => true\r\n *\r\n *    app.enable('foo')\r\n *    app.disabled('foo')\r\n *    // => false\r\n *\r\n * @param {String} setting\r\n * @return {Boolean}\r\n * @public\r\n */\n\napp.disabled = function disabled(setting) {\n  return !this.set(setting);\n};\n\n/**\r\n * Enable `setting`.\r\n *\r\n * @param {String} setting\r\n * @return {app} for chaining\r\n * @public\r\n */\n\napp.enable = function enable(setting) {\n  return this.set(setting, true);\n};\n\n/**\r\n * Disable `setting`.\r\n *\r\n * @param {String} setting\r\n * @return {app} for chaining\r\n * @public\r\n */\n\napp.disable = function disable(setting) {\n  return this.set(setting, false);\n};\n\n/**\r\n * Delegate `.VERB(...)` calls to `router.VERB(...)`.\r\n */\n\nmethods.forEach(function (method) {\n  app[method] = function (path) {\n    if (method === 'get' && arguments.length === 1) {\n      // app.get(setting)\n      return this.set(path);\n    }\n    this.lazyrouter();\n    var route = this._router.route(path);\n    route[method].apply(route, slice.call(arguments, 1));\n    return this;\n  };\n});\n\n/**\r\n * Special-cased \"all\" method, applying the given route `path`,\r\n * middleware, and callback to _every_ HTTP method.\r\n *\r\n * @param {String} path\r\n * @param {Function} ...\r\n * @return {app} for chaining\r\n * @public\r\n */\n\napp.all = function all(path) {\n  this.lazyrouter();\n  var route = this._router.route(path);\n  var args = slice.call(arguments, 1);\n  for (var i = 0; i < methods.length; i++) {\n    route[methods[i]].apply(route, args);\n  }\n  return this;\n};\n\n// del -> delete alias\n\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');\n\n/**\r\n * Render the given view `name` name with `options`\r\n * and a callback accepting an error and the\r\n * rendered template string.\r\n *\r\n * Example:\r\n *\r\n *    app.render('email', { name: 'Tobi' }, function(err, html){\r\n *      // ...\r\n *    })\r\n *\r\n * @param {String} name\r\n * @param {Object|Function} options or fn\r\n * @param {Function} callback\r\n * @public\r\n */\n\napp.render = function render(name, options, callback) {\n  var cache = this.cache;\n  var done = callback;\n  var engines = this.engines;\n  var opts = options;\n  var renderOptions = {};\n  var view;\n\n  // support callback function as second arg\n  if (typeof options === 'function') {\n    done = options;\n    opts = {};\n  }\n\n  // merge app.locals\n  merge(renderOptions, this.locals);\n\n  // merge options._locals\n  if (opts._locals) {\n    merge(renderOptions, opts._locals);\n  }\n\n  // merge options\n  merge(renderOptions, opts);\n\n  // set .cache unless explicitly provided\n  if (renderOptions.cache == null) {\n    renderOptions.cache = this.enabled('view cache');\n  }\n\n  // primed cache\n  if (renderOptions.cache) {\n    view = cache[name];\n  }\n\n  // view\n  if (!view) {\n    var View = this.get('view');\n    view = new View(name, {\n      defaultEngine: this.get('view engine'),\n      root: this.get('views'),\n      engines: engines\n    });\n    if (!view.path) {\n      var dirs = Array.isArray(view.root) && view.root.length > 1 ? 'directories \"' + view.root.slice(0, -1).join('\", \"') + '\" or \"' + view.root[view.root.length - 1] + '\"' : 'directory \"' + view.root + '\"';\n      var err = new Error('Failed to lookup view \"' + name + '\" in views ' + dirs);\n      err.view = view;\n      return done(err);\n    }\n\n    // prime the cache\n    if (renderOptions.cache) {\n      cache[name] = view;\n    }\n  }\n\n  // render\n  tryRender(view, renderOptions, done);\n};\n\n/**\r\n * Listen for connections.\r\n *\r\n * A node `http.Server` is returned, with this\r\n * application (which is a `Function`) as its\r\n * callback. If you wish to create both an HTTP\r\n * and HTTPS server you may do so with the \"http\"\r\n * and \"https\" modules as shown here:\r\n *\r\n *    var http = require('http')\r\n *      , https = require('https')\r\n *      , express = require('express')\r\n *      , app = express();\r\n *\r\n *    http.createServer(app).listen(80);\r\n *    https.createServer({ ... }, app).listen(443);\r\n *\r\n * @return {http.Server}\r\n * @public\r\n */\n\napp.listen = function listen() {\n  var server = http.createServer(this);\n  return server.listen.apply(server, arguments);\n};\n\n/**\r\n * Log error using console.error.\r\n *\r\n * @param {Error} err\r\n * @private\r\n */\n\nfunction logerror(err) {\n  /* istanbul ignore next */\n  if (this.get('env') !== 'test') console.error(err.stack || err.toString());\n}\n\n/**\r\n * Try rendering a view.\r\n * @private\r\n */\n\nfunction tryRender(view, options, callback) {\n  try {\n    view.render(options, callback);\n  } catch (err) {\n    callback(err);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}