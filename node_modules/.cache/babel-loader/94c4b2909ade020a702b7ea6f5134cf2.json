{"ast":null,"code":"/*!\r\n * statuses\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar codes = require('./codes.json');\n\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = status;\n\n// status code to message map\nstatus.message = codes;\n\n// status message (lower-case) to code map\nstatus.code = createMessageToStatusCodeMap(codes);\n\n// array of status codes\nstatus.codes = createStatusCodeList(codes);\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n};\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n};\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n\n/**\r\n * Create a map of message to status code.\r\n * @private\r\n */\n\nfunction createMessageToStatusCodeMap(codes) {\n  var map = {};\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code);\n\n    // populate map\n    map[message.toLowerCase()] = status;\n  });\n  return map;\n}\n\n/**\r\n * Create a list of all status codes.\r\n * @private\r\n */\n\nfunction createStatusCodeList(codes) {\n  return Object.keys(codes).map(function mapCode(code) {\n    return Number(code);\n  });\n}\n\n/**\r\n * Get the status code for given message.\r\n * @private\r\n */\n\nfunction getStatusCode(message) {\n  var msg = message.toLowerCase();\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"');\n  }\n  return status.code[msg];\n}\n\n/**\r\n * Get the status message for given code.\r\n * @private\r\n */\n\nfunction getStatusMessage(code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code);\n  }\n  return status.message[code];\n}\n\n/**\r\n * Get the status code.\r\n *\r\n * Given a number, this will throw if it is not a known status\r\n * code, otherwise the code will be returned. Given a string,\r\n * the string will be parsed for a number and return the code\r\n * if valid, otherwise will lookup the code assuming this is\r\n * the status message.\r\n *\r\n * @param {string|number} code\r\n * @returns {number}\r\n * @public\r\n */\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code);\n  }\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  }\n\n  // '403'\n  var n = parseInt(code, 10);\n  if (!isNaN(n)) {\n    return getStatusMessage(n);\n  }\n  return getStatusCode(code);\n}","map":null,"metadata":{},"sourceType":"script"}